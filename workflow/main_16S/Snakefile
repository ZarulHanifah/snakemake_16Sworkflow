
import pandas as pd

configfile: "config/config.yaml"

metadata = pd.read_csv(config["metadata"], sep = "\t", index_col = 0)
samples = pd.read_csv(config["metadata"], sep = "\t", index_col = 0).index.tolist()

def process_ancom_list(ancom_list, metadata_df):
	return [a for a in ancom_list if a in metadata_df.columns.tolist()]

def determine_all_output():
	# before highest read
	if config["read_depth"]["highest"] == 0:
		results = [
			rules.demux_summarize.output,
			rules.feature_table_summarize.output,
			rules.feature_table_tabulate_seqs.output,
			rules.metadata_tabulate_taxonomy.output,
			rules.get_dna_seq.output,
			rules.vis_filter_table_nonmicrobial.output,
			rules.phylogeny_midpoint_root.output
		]
		print("If all done, visualize results/dada2/filt_table.qzv",
				"then modify config.yaml, read_depth, highest")
	# before lowest read
	elif config["read_depth"]["lowest"] == 0:
		results = [
			rules.demux_summarize.output,
			rules.feature_table_summarize.output,
			rules.feature_table_tabulate_seqs.output,
			rules.metadata_tabulate_taxonomy.output,
			rules.get_dna_seq.output,
			rules.vis_filter_table_nonmicrobial.output,
			rules.phylogeny_midpoint_root.output,
			rules.mock_diversity_alpha_rarefaction.output
		]
		print("If all done, visualize results/mock_diversity_alpha_rarefaction.qzv",
				"then set config.yaml, read_depth, lowest")
	# after lowest read
	else:
		results = [
			rules.demux_summarize.output,
			rules.feature_table_summarize.output,
			rules.feature_table_tabulate_seqs.output,
			rules.metadata_tabulate_taxonomy.output,
			rules.get_dna_seq.output,
			rules.vis_filter_table_nonmicrobial.output,
			rules.phylogeny_midpoint_root.output,
			rules.mock_diversity_alpha_rarefaction.output,
			rules.taxa_barplot.output,
			rules.diversity_alpha_rarefaction.output,
			rules.diversity_core_metrics_phylogenetics.output,
			rules.get_feature_table.output
		]

		try:
			ancom_list = config["ancom"]
			ancom_list = process_ancom_list(ancom_list, metadata)
			if len(ancom_list) == 0:
				pass
			results.append(expand(rules.composition_ancom.output, metadata = ancom_list))
		except:
			pass
	return results

include: "rules/preprocessing.smk"
include: "rules/q2_denoising.smk"
include: "rules/taxonomy.smk"
include: "rules/phylogeny.smk"
include: "rules/downstream.smk"
include: "rules/ancom.smk"

rule all:
	input:
		determine_all_output()

